Sherlock considers a string to be valid if all characters of the string appear the same number of times. 
It is also valid if he can remove just 1 character at 1  index in the string, and the remaining characters will occur the same number of times.
Given a string , determine if it is valid. If so, return YES, otherwise return NO.

For example, if , it is a valid string because frequencies are {a:1,b:1,c:1} .
So is s= "abc" because we can remove one c  and have 1 of each character in the remaining string. 
If s='abccc  however, the string is not valid as we can only remove 1 occurrence of c
That would leave character frequencies of {a:1,b:1,c:2}

Output Format

Print YES if string  is valid, otherwise, print NO.

Sample Input 0

aabbcd
Sample Output 0

NO
Explanation 0

Given s="aabbcd" , we would need to remove two characters, both c and d  aabb or a and b  abcd, to make it valid.
We are limited to removing only one character, so s is invalid.

Sample Input 1

aabbccddeefghi
Sample Output 1

NO
Explanation 1

Frequency counts for the letters are as follows:

{'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 1, 'g': 1, 'h': 1, 'i': 1}

There are two ways to make the valid string:

Remove 4 characters with a frequency of 1:{fghi} .
Remove 5 characters of frequency 2:{abcde} .
Neither of these is an option.

Sample Input 2

abcdefghhgfedecba
Sample Output 2

YES
Explanation 2

All characters occur twice except for e which occurs 3 times. We can delete one instance of e to have a valid string.

ANSWER>
We will basically count the no. of element in string and store them in list.Then sort the list in order to know how many element of string 
have same no .of occurence and we will check last two and first two string as shown below if it satisfy the string output is given and 
else
"no" will occur if above two condition no occr
x=input()
y=list(set(x))
z=[]
for i in y:
    a=x.count(i)
    z.append(a)
z.sort()
c=z.count(z[0])
q=len(y)-c
if q==0:
    print("YES")
elif q==1 and z[len(z)-1]-z[len(z)-2]==1:
    print("YES")
elif len(z)-z.count(z[len(z)-1])==1:
        print("YES")    
else:
    print("NO")
