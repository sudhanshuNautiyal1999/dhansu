1) D FLIP FLOP -> Design using Verilog and Verified using System Verilog

RTL.v

module flipflop(clk ,rst ,in ,out);
  
  input clk ,rst ,in;
  output reg out;
  
  always @(posedge clk)
    begin
      if(rst)
        out <= 1'b0;
      else
        out <= in;
    end
  
endmodule

TB.sv

class transaction;
  
  rand bit in;
  bit out;
  
  function void display(string process = "");
    $display("[%0s] IN = %0d OUT = %0d" ,process ,in ,out);
  endfunction
  
  function transaction copy();
    copy     = new();
    copy.in  = this.in;
    copy.out = this.out;
  endfunction
  
endclass

class generator;
  
  transaction gentrans;
  mailbox #(transaction) gendrvmbx;
  mailbox #(transaction) genscombx;
  event sco;
  event done;
  
  function new(mailbox #(transaction) gendrvmbx ,mailbox #(transaction) genscombx);
    this.gendrvmbx = gendrvmbx;
    this.genscombx = genscombx;
    gentrans    = new();
  endfunction
  
  task genrun;
    for(int i = 0 ;i < 10 ;i = i + 1)
      begin
        gentrans.randomize();
        $display("NEW STIMULI");
        gentrans.display("GEN");
        gendrvmbx.put(gentrans.copy);
        genscombx.put(gentrans.copy);
        @(sco);
       //wait(sco.triggered);
      end
    -> done;
  endtask
  
endclass

interface flip_flop;
  
  logic clk ,rst ,in ,out;
  
endinterface

class driver;
  
  transaction drvtrans;
  mailbox #(transaction) drvgenmbx;
  virtual flip_flop ff;
  
  function new(mailbox #(transaction) drvgenmbx);
    this.drvgenmbx = drvgenmbx;
  endfunction
  
  task reset();
    $display("RESET OPERATION STARTED");
    //#15;
    repeat(2) @(posedge ff.clk);
    ff.rst <= 1'b1;
    //#10;
    @(posedge ff.clk);
    ff.rst <= 1'b0;
    $display("RESET OPERATION ENDED");
  endtask
  
  task drvrun;
    forever
      begin
        drvgenmbx.get(drvtrans);
        $display("DRIVER OPERATION");
        ff.in <= drvtrans.in;
        drvtrans.display("DRV");
      end
  endtask
     
endclass

class monitor;
  
  transaction monsco;
  mailbox #(transaction) monscombx;
  virtual flip_flop ff;
  
  function new(mailbox #(transaction) monscombx);
    this.monscombx = monscombx;
    //monsco         = new();
  endfunction
  
  task monrun();
    monsco = new();
    forever
      begin
        //#10;
        repeat(2) @(posedge ff.clk);
        monsco.out = ff.out;
        monscombx.put(monsco);
        monsco.display("MON");
      end
  endtask
  
endclass

class scoreboard;
  
  transaction scogentrans;
  transaction scomontrans;
  mailbox #(transaction) genmbx;
  mailbox #(transaction) monmbx;
  event sco;
  
  function new(mailbox #(transaction) genmbx ,mailbox #(transaction) monmbx);
    this.genmbx = genmbx;
    this.monmbx = monmbx;
  endfunction
  
  task scorun();
    forever
      begin
        //$display("SCOREBOAD OPERATION");
        //$display("SCO - %0t",$time);
        genmbx.get(scogentrans);
        monmbx.get(scomontrans);
        $display("SCOREBOAD OPERATION");
        scogentrans.display("GEN");
        scomontrans.display("MON");
        if(scomontrans.out == scogentrans.in)
          $display("CORRECT OUTPUT");
        else
          $display("WRONG OUTPUT");
        -> sco;
      end
  endtask
  
endclass

class environment;
  
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  event scoevent;
  
  mailbox #(transaction) gentodrvmbx;
  mailbox #(transaction) gentoscombx;
  mailbox #(transaction) montoscombx;
  
  virtual flip_flop ff;
  
  function new(virtual flip_flop ff);
    gentodrvmbx = new();
    gentoscombx = new();
    montoscombx = new();
    gen = new(gentodrvmbx ,gentoscombx);
    drv = new(gentodrvmbx);
    mon = new(montoscombx);
    sco = new(gentoscombx ,montoscombx);
    gen.sco = scoevent;
    sco.sco = scoevent;
    this.ff = ff;
    drv.ff = this.ff;
    mon.ff = this.ff;
  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task main_test();
    fork
      gen.genrun();
      drv.drvrun();
      mon.monrun();
      sco.scorun();
    join_any
  endtask
  
  task post_test();
    wait(gen.done.triggered);
    $finish();
  endtask
  
  task run();
    pre_test();
    main_test();
    post_test();
  endtask
  
endclass

module tb;
  
  flip_flop ff();
  environment env;
  flipflop dut(ff.clk ,ff.rst ,ff.in ,ff.out);
  
  initial
    begin
      ff.clk <= 1'b0;
    end
  
  always #5 ff.clk <= ~ff.clk;
  
  initial
    begin
      env = new(ff);
      env.run();
    end
  
  initial begin
  $dumpfile("dump.vcd");
  $dumpvars;
  #10000 
  $finish;
end
  
endmodule

2) FULL ADDER

RTL.v

module adder(clk ,rst ,a ,b ,sum);
  
  input clk ,rst;
  input [3:0] a ,b;
  output reg [4:0] sum;
  
  always @(posedge clk)
    begin
      if(rst)
        sum <= 5'b00000;
      else
        sum <= a + b;
    end
  
endmodule

TB.sv

class transaction;
  
  randc bit [3:0] a ,b;
  bit [4:0] sum;
  
  function void display(string s = "");
    $display("[%0s] : A = %0d B = %0d SUM = %0d", s ,a ,b ,sum ,$time);
  endfunction
  
  function transaction copy();
    copy     = new();
    copy.a   = this.a;
    copy.b   = this.b;
    copy.sum = this.sum;
  endfunction
  
endclass

class generator;
  
  transaction gentrans;
  mailbox #(transaction) gentodrvmbx;
  mailbox #(transaction) gentoscombx;
  event sco;
  event over;
  
  function new(mailbox #(transaction) gentodrvmbx ,mailbox #(transaction) gentoscombx);
    this.gentodrvmbx = gentodrvmbx;
    this.gentoscombx = gentoscombx;
    gentrans         = new();
  endfunction
  
  task run();
    for(int i = 0 ;i < 10 ;i = i + 1)
      begin
        $display("STIMULI GENERATION");
        gentrans.randomize();
        gentodrvmbx.put(gentrans.copy);
        gentoscombx.put(gentrans.copy);
        gentrans.display("GEN");
        @(sco);
      end
    ->over;
  endtask
  
endclass

interface adder_if();
  logic clk ,rst;
  logic [3:0] a ,b;
  logic [4:0] sum;
endinterface

class driver;
  
  transaction drvtrans;
  mailbox #(transaction) gentodrvmbx;
  virtual adder_if af;
  
  function new(mailbox #(transaction) gentodrvmbx);
    this.gentodrvmbx = gentodrvmbx;
  endfunction
  
  task reset();
    $display("RESET OPERATION STARTED");
    af.rst <= 1'b1;
    repeat(2) @(posedge af.clk);
    af.rst <= 1'b0;
    $display("RESET OPERATION COMPLETED");
  endtask
  
  task run();
    forever
      begin
        repeat(1) @(posedge af.clk);
        gentodrvmbx.get(drvtrans);
        drvtrans.display("DRV");
        af.a <= drvtrans.a;
        af.b <= drvtrans.b;
      end
  endtask
  
endclass

class monitor;
  
  transaction montrans;
  mailbox #(transaction) montoscombx;
  virtual adder_if af;
  
  function new(mailbox #(transaction) montoscombx);
    this.montoscombx = montoscombx;
  endfunction
  
  task run;
    montrans = new();
    forever
      begin
        repeat(3) @(posedge af.clk);
        montrans.sum = af.sum;
        montrans.display("MON");
        montoscombx.put(montrans);
      end
  endtask
  
endclass

class scoreboard;
  
  transaction montrans;
  transaction gentrans;
  mailbox #(transaction) montoscombx;
  mailbox #(transaction) gentoscombx;
  event sco;
  
  function new(mailbox #(transaction) montoscombx ,mailbox #(transaction) gentoscombx);
    this.montoscombx = montoscombx;
    this.gentoscombx = gentoscombx;
  endfunction
  
  task run();
    forever
      begin
        montoscombx.get(montrans);
        gentoscombx.get(gentrans);
        $display("SCOREBOARD RESULT");
        gentrans.display("GEN");
        montrans.display("SCO");
        if(gentrans.a + gentrans.b == montrans.sum)
          $display("PASS");
        else
          $display("FAIL");
        ->sco;
      end
  endtask
  
endclass

class environment;
  
  generator  gen;
  driver     drv;
  monitor    mon;
  scoreboard sco;
  mailbox #(transaction) gendrvmbx;
  mailbox #(transaction) genscombx;
  mailbox #(transaction) monscombx;
  virtual adder_if af;
  event scor;
  
  function new(virtual adder_if af);
    gendrvmbx = new();
    genscombx = new();
    monscombx = new();
    gen       = new(gendrvmbx ,genscombx);
    drv       = new(gendrvmbx);
    mon       = new(monscombx);
    sco       = new(monscombx ,genscombx);
    this.af   = af;
    drv.af    = this.af;
    mon.af    = this.af;
    gen.sco   = scor;
    sco.sco   = scor;
  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task main_test();
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any
  endtask
  
  task post_test();
    wait(gen.over.triggered);
    $finish();
  endtask
  
  task run();
    pre_test();
    main_test();
    post_test();
  endtask
  
endclass

module tb;
  
  adder_if af();
  adder dut(af.clk ,af.rst ,af.a ,af.b ,af.sum);
  
  initial
    begin
      af.clk <= 1'b0;
    end
  
  always #5 af.clk <= ~af.clk;
  
  environment env;
  
  initial
    begin
      env = new(af);
      env.run();
    end
  
  initial begin
  $dumpfile("dump.vcd");
  $dumpvars;
  #10000 
  $finish;
end
  
endmodule
  
  

  
  

    
  
  

  
  
  
  
  
  
  
    
    
  
  
    
  
  
    
