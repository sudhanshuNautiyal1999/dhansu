Q1>The Problem
You have a string and you want to find all the possible unique substrings this string has.
Specifically, you should be returning the total number of unique substrings.
What You Have Now
A function called getSubstrings() with the string str as a parameter.

JavaScript Methodology | What Can Help Out
JavaScript has many methods that could possibly come in handy here, such as:
substring() (surprise, surprise)
sort()
.length
splice()
.push
and finally .toLowerCase()
It's up to you how to figure out how to make them work in your favor!

You also might want to define a helper function for eliminating the duplicates.
Python Methodology | What Can Help Out
Thanks Unnamed!

Python has some built in methods that could come in handy here, such as:
.lower()
len()
set()
and finally range()
Java Methodology | What Can Help Out
Thanks CodeVortex!

Java has many methods/classes that can help out, such as:
ArrayList
List
toLowerCase()
length()
substring()
contains()
add()
isEmpty()
size()
To Note
There should be no repeated substrings/duplicates, each substring should be unique.
The substrings do not have to be actual words.
Your solution should not be case-sensitive, meaning that the function should ignore cases and return all your strings in lower case.
Your substrings can have the same characters repeated within them, i.e. "mmm" and "ooooo".

ANSWER>
def getSubstrings(a):
	s=a.lower()
	z=[]
	for i in range(len(s)):
		for j in range(len(s)):
			if s[i:j+1]!="":
				z.append(s[i:j+1])
	return len(set(z))



