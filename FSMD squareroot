module squareroot(ready,clk,reset,in,out);
input ready,clk,reset;
input [8:0] in;
output reg [7:0] out;
parameter start=3'b000,check=3'b001,Process=3'b010,result=3'b100;
reg [2:0] ps,ns;
reg [7:0] count,sub;
reg [8:0]in1;
always @(posedge clk)
begin
if(reset)
ps<=start;
else
ps<=ns;
end
always @(ready,in1,in,ps)
begin
case(ps)
start: ns=ready?check:start;
check: ns=(in1==8'b00000000)?result:Process;
Process: ns=check;
result : ns=result;
endcase
end
always @(reset,in,in1,ps,count,sub)
begin
if (reset)
begin
out=8'b00000000;
count=8'b00000000;
sub=8'b00000001;
in1=in;
end
else if(ps==Process)
begin
in1=in1-sub;
sub=sub+2'b10;
count=count+1'b1;
out=8'b00000000;
end
else if(ps==result)
begin
out=count;
end
else
begin
out=8'b00000000;
count=count;
sub=sub;
in1=in1;
end
end
endmodule

module tb;
reg ready,clk,reset;
reg [8:0] in;
wire [7:0] out;
practice dut(ready,clk,reset,in,out);
initial
begin
clk=1'b0;
ready=1'b0;
in=1;
reset=1'b0;
#2
reset=1'b1;
#4
reset=1'b0;
ready=1'b1;
#10
ready=1'b0;
end
always #5 clk=~clk;
endmodule


